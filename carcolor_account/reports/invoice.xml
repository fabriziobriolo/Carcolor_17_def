<?xml version="1.0" encoding="UTF-8"?>
<odoo>

    <record id="account.account_invoices" model="ir.actions.report">
        <field name="report_type">carbone</field>
        <field name="carbone_report_type">pdf</field>
        <field name="carbone_template_file" type="base64" file="carcolor_account/reports/templates/invoice.docx"/>
        <field name="carbone_json_data">{
    "number": object.name or "",
    "date": object.invoice_date and object.invoice_date.strftime('%d/%m/%Y') or "",
    "bank": object.company_id.partner_id.bank_ids and object.company_id.partner_id.bank_ids[0].bank_id.name or "",
    "iban": object.company_id.partner_id.bank_ids and object.company_id.partner_id.bank_ids[0].acc_number or "",
    "payment_terms": object.invoice_payment_term_id.name or "",
    "company": {
        "name": object.company_id.name,
        "cf": object.company_id.partner_id.l10n_it_codice_fiscale or object.company_id.partner_id.vat or "",
        "vat": object.company_id.partner_id.vat or "",
        "street": object.company_id.partner_id.street or "",
        "zip": object.company_id.partner_id.zip or "",
        "city": object.company_id.partner_id.city or "",
        "prov": object.company_id.partner_id.state_id.code or "",
        "phone": object.company_id.partner_id.phone or ""
    },
    "partner": {
        "name": object.partner_id.commercial_partner_id.name or "",
        "street": object.partner_id.commercial_partner_id.street or "",
        "zip": object.partner_id.commercial_partner_id.zip or "",
        "city": object.partner_id.commercial_partner_id.city or "",
        "prov": object.partner_id.commercial_partner_id.state_id.code or "",
        "vat": object.partner_id.commercial_partner_id.vat or "",
        "cf": object.partner_id.commercial_partner_id.l10n_it_codice_fiscale or object.partner_id.commercial_partner_id.vat or ""
    },
    "lines": [
        {
            "product": {
                "code": line.product_id.default_code or "",
                "name": line.name or line.product_id.name or "",
                "uom": line.product_uom_id.name or "",
                "qty": line.quantity,
                "unit_price": line.price_unit,
                "lots": ""
            },
            "discount": line.discount if line.discount else "",
            "amount_untaxed": line.price_subtotal,
            "vat_code": line.tax_ids and line.tax_ids[0].name or ""
        }
        for line in object.invoice_line_ids.filtered(lambda l: l.display_type not in ('line_section', 'line_note'))
    ] if object.invoice_line_ids else [],
    "taxes": [
        {
            "code": tax_line.tax_line_id.name or "",
            "name": tax_line.tax_line_id.name or "",
            "tax_amount": abs(tax_line.balance),
            "tax_base_amount": tax_line.tax_base_amount,
            "tax_total_amount": tax_line.tax_base_amount + abs(tax_line.balance)
        }
        for tax_line in object.line_ids.filtered(lambda l: l.tax_line_id)
    ],
    "amount_untaxed": object.amount_untaxed,
    "amount_tax": object.amount_tax,
    "amount_total": object.amount_total
}</field>
    </record>

    <record id="account.account_invoices_without_payment" model="ir.actions.report">
        <field name="report_type">carbone</field>
        <field name="carbone_report_type">pdf</field>
        <field name="carbone_template_file" type="base64" file="carcolor_account/reports/templates/invoice.docx"/>
        <field name="carbone_json_data">{
    "number": object.name or "",
    "date": object.invoice_date and object.invoice_date.strftime('%d/%m/%Y') or "",
    "bank": object.company_id.partner_id.bank_ids and object.company_id.partner_id.bank_ids[0].bank_id.name or "",
    "iban": object.company_id.partner_id.bank_ids and object.company_id.partner_id.bank_ids[0].acc_number or "",
    "payment_terms": object.invoice_payment_term_id.name or "",
    "company": {
        "name": object.company_id.name,
        "cf": object.company_id.partner_id.l10n_it_codice_fiscale or object.company_id.partner_id.vat or "",
        "vat": object.company_id.partner_id.vat or "",
        "street": object.company_id.partner_id.street or "",
        "zip": object.company_id.partner_id.zip or "",
        "city": object.company_id.partner_id.city or "",
        "prov": object.company_id.partner_id.state_id.code or "",
        "phone": object.company_id.partner_id.phone or ""
    },
    "partner": {
        "name": object.partner_id.commercial_partner_id.name or "",
        "street": object.partner_id.commercial_partner_id.street or "",
        "zip": object.partner_id.commercial_partner_id.zip or "",
        "city": object.partner_id.commercial_partner_id.city or "",
        "prov": object.partner_id.commercial_partner_id.state_id.code or "",
        "vat": object.partner_id.commercial_partner_id.vat or "",
        "cf": object.partner_id.commercial_partner_id.l10n_it_codice_fiscale or object.partner_id.commercial_partner_id.vat or ""
    },
    "lines": [
        {
            "product": {
                "code": line.product_id.default_code or "",
                "name": line.name or line.product_id.name or "",
                "uom": line.product_uom_id.name or "",
                "qty": line.quantity,
                "unit_price": line.price_unit,
                "lots": ""
            },
            "discount": line.discount if line.discount else "",
            "amount_untaxed": line.price_subtotal,
            "vat_code": line.tax_ids and line.tax_ids[0].name or ""
        }
        for line in object.invoice_line_ids.filtered(lambda l: l.display_type not in ('line_section', 'line_note'))
    ] if object.invoice_line_ids else [],
    "taxes": [
        {
            "code": tax_line.tax_line_id.name or "",
            "name": tax_line.tax_line_id.name or "",
            "tax_amount": abs(tax_line.balance),
            "tax_base_amount": tax_line.tax_base_amount,
            "tax_total_amount": tax_line.tax_base_amount + abs(tax_line.balance)
        }
        for tax_line in object.line_ids.filtered(lambda l: l.tax_line_id)
    ],
    "amount_untaxed": object.amount_untaxed,
    "amount_tax": object.amount_tax,
    "amount_total": object.amount_total
}</field>
    </record>

</odoo>